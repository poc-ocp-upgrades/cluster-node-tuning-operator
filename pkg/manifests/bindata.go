package manifests

import (
	"bytes"
	godefaultbytes "bytes"
	godefaulthttp "net/http"
	godefaultruntime "runtime"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}
	return buf.Bytes(), nil
}

type asset struct {
	bytes	[]byte
	info	os.FileInfo
}
type bindataFileInfo struct {
	name	string
	size	int64
	mode	os.FileMode
	modTime	time.Time
}

func (fi bindataFileInfo) Name() string {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	return nil
}

var _assetsTuned01ServiceAccountYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x2c\xc7\x31\x0e\x42\x31\x08\x06\xe0\xbd\xa7\xe0\x02\x1d\x5c\xd9\x3c\x83\x89\x3b\xa1\xbf\x4a\xf4\x41\x43\xe9\x3b\xbf\xcb\x1b\x3f\x99\xf6\x44\x2e\x0b\x67\x3a\x6f\xed\x6b\x3e\x98\x1e\xc8\xd3\x14\x77\xd5\xd8\x5e\xed\x40\xc9\x90\x12\x6e\x44\x2e\x07\x98\x6a\x3b\xc6\xa5\x35\x45\xc1\x14\x13\xbe\x3e\xf6\xaa\xae\xbf\xbd\x0a\xd9\x3d\x06\x7a\x6d\x37\x7f\xf7\x98\x48\xa9\xc8\xf6\x0f\x00\x00\xff\xff\x95\x01\xe5\x42\x70\x00\x00\x00")

func assetsTuned01ServiceAccountYamlBytes() ([]byte, error) {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	return bindataRead(_assetsTuned01ServiceAccountYaml, "assets/tuned/01-service-account.yaml")
}
func assetsTuned01ServiceAccountYaml() (*asset, error) {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	bytes, err := assetsTuned01ServiceAccountYamlBytes()
	if err != nil {
		return nil, err
	}
	info := bindataFileInfo{name: "assets/tuned/01-service-account.yaml", size: 112, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned02ClusterRoleYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x64\x8d\x3f\x4f\xc4\x30\x0c\xc5\xf7\x7c\x8a\x28\xf3\x5d\x11\x1b\xca\xca\xc0\xc6\xc0\xc0\x82\x3a\xf8\x12\xd3\x5a\xd7\xda\x91\xed\x94\x3f\x9f\x1e\x5d\x4f\x0c\x1c\x93\x25\xff\xde\x7b\x3f\x68\xf4\x8a\x6a\x24\x9c\xa3\x9e\xa0\x0c\xd0\x7d\x16\xa5\x6f\x70\x12\x1e\xce\x0f\x36\x90\xdc\x6d\xf7\xe1\x4c\x5c\x73\x7c\x5c\xba\x39\xea\x8b\x2c\x18\x56\x74\xa8\xe0\x90\x43\x8c\x0c\x2b\xe6\x58\xae\xf4\xc8\x52\xf1\xe8\x9d\x89\xa7\xec\x9d\xb1\x06\xed\x0b\x5a\x0e\xc7\x08\x8d\x9e\x54\x7a\xb3\x1c\xdf\x52\x1a\x43\x8c\x8a\x26\x5d\x0b\xee\x9f\x4b\xd3\xd2\x21\x35\xa9\xb6\xd3\x0d\xf5\xb4\x93\x09\x3d\x1d\xd2\x42\x76\x39\x1f\xe0\x65\x4e\xe3\xed\x9e\x61\xe9\x4a\xfe\x35\x48\x43\xb6\x99\xde\x7d\x20\xf9\x2f\xf9\x8d\x15\x61\xc7\x4f\x2f\xc2\xe6\x0a\xc4\x7e\xa3\xec\x86\x7f\xca\xcf\xb0\x5e\x07\x9a\xd2\x46\x0b\x4e\x58\xd3\x18\x7e\x02\x00\x00\xff\xff\x24\x0d\xec\x93\x42\x01\x00\x00")

func assetsTuned02ClusterRoleYamlBytes() ([]byte, error) {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	return bindataRead(_assetsTuned02ClusterRoleYaml, "assets/tuned/02-cluster-role.yaml")
}
func assetsTuned02ClusterRoleYaml() (*asset, error) {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	bytes, err := assetsTuned02ClusterRoleYamlBytes()
	if err != nil {
		return nil, err
	}
	info := bindataFileInfo{name: "assets/tuned/02-cluster-role.yaml", size: 322, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned03ClusterRoleBindingYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x8c\x8e\xb1\x4e\x03\x31\x0c\x86\xf7\x3c\x45\x5e\x20\x87\xd8\x90\x37\x60\x67\x28\x12\xbb\x9b\xb8\xad\xe9\x9d\x7d\xb2\x9d\x4a\xf0\xf4\xe8\x94\x8a\x05\x86\x1b\x2d\xfd\xdf\xf7\x19\x57\xfe\x20\x73\x56\x81\x6c\x47\xac\x13\xf6\xb8\xa8\xf1\x37\x06\xab\x4c\xd7\x27\x9f\x58\x1f\x6e\x8f\xe9\xca\xd2\x20\xbf\xce\xdd\x83\xec\xa0\x33\xbd\xb0\x34\x96\x73\x5a\x28\xb0\x61\x20\xa4\x9c\x05\x17\x82\x5c\xc7\xa8\x88\x36\x2a\xd1\x85\xe5\x0c\xd1\x85\x5a\x32\x9d\xe9\x40\xa7\x6d\xfa\xc7\xb7\x03\xf7\x7e\xfc\xa4\x1a\x0e\xa9\xdc\xf9\x77\xb2\x1b\x57\x7a\xae\x55\xbb\xc4\xaf\x62\xcc\xc7\xe5\x2b\x56\x82\xac\x2b\x89\x5f\xf8\x14\xe5\x1f\x7f\xd1\x95\x0c\x43\x2d\x75\x27\x7b\xdb\xa8\xad\xe1\x5f\x1e\xb4\x80\x8f\x08\x8e\x08\xec\x33\xdd\x5f\xfe\x09\x00\x00\xff\xff\x51\x4a\xd8\x71\x60\x01\x00\x00")

func assetsTuned03ClusterRoleBindingYamlBytes() ([]byte, error) {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	return bindataRead(_assetsTuned03ClusterRoleBindingYaml, "assets/tuned/03-cluster-role-binding.yaml")
}
func assetsTuned03ClusterRoleBindingYaml() (*asset, error) {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	bytes, err := assetsTuned03ClusterRoleBindingYamlBytes()
	if err != nil {
		return nil, err
	}
	info := bindataFileInfo{name: "assets/tuned/03-cluster-role-binding.yaml", size: 352, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned04CmTunedProfilesYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x54\xcc\xa1\x0e\xc2\x40\x0c\x06\x60\x7f\x4f\xd1\xcc\x57\x60\xcf\xa2\xb1\xf8\x66\xf7\x6f\x34\x6c\x6d\x73\xd7\xe3\xf9\x49\x08\x08\xec\x27\x3e\x09\xbd\xa3\x0f\x75\xab\xf4\xba\x94\xa7\x5a\xab\x74\x75\xdb\x74\xbf\x49\x94\x13\x29\x4d\x52\x6a\x21\x32\x39\x51\x29\xa7\xa1\x71\x74\xdf\xf4\xc0\xf8\xf2\x08\x59\x51\xc9\x03\x36\x1e\xba\x25\xaf\xc7\x1c\x89\xce\xe6\x0d\x9c\xd3\xd4\x76\xf6\x40\x97\xf4\x5e\x7e\xe1\x7f\xc5\x1f\xa6\x65\x29\xef\x00\x00\x00\xff\xff\x0a\xb4\xaa\xf4\x94\x00\x00\x00")

func assetsTuned04CmTunedProfilesYamlBytes() ([]byte, error) {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	return bindataRead(_assetsTuned04CmTunedProfilesYaml, "assets/tuned/04-cm-tuned-profiles.yaml")
}
func assetsTuned04CmTunedProfilesYaml() (*asset, error) {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	bytes, err := assetsTuned04CmTunedProfilesYamlBytes()
	if err != nil {
		return nil, err
	}
	info := bindataFileInfo{name: "assets/tuned/04-cm-tuned-profiles.yaml", size: 148, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned05CmTunedRecommendYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x44\xcc\xa1\xb2\x02\x31\x0c\x05\x50\xdf\xaf\xc8\xac\xaf\x78\x36\xf6\x69\x2c\x3e\xd3\xde\x5d\x32\xd0\x24\xd3\x66\xf9\x7e\x04\x30\xd8\x23\x8e\x84\x5e\x31\x97\xba\x31\x3d\xff\xca\x5d\xad\x33\xfd\xbb\xed\x7a\x5c\x24\xca\x40\x4a\x97\x14\x2e\x44\x26\x03\x4c\x79\x1a\x7a\x9d\x68\x3e\x06\xac\x7f\x7c\x85\x34\x30\x79\xc0\xd6\x4d\xf7\xac\xed\x71\xae\xc4\xac\xe6\x1d\x35\x4f\x53\x3b\xaa\x07\xa6\xa4\xcf\xf2\x1d\xdf\x97\xb7\xf8\x7d\x4c\xdb\x56\x5e\x01\x00\x00\xff\xff\x1b\xe2\xd5\x67\x95\x00\x00\x00")

func assetsTuned05CmTunedRecommendYamlBytes() ([]byte, error) {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	return bindataRead(_assetsTuned05CmTunedRecommendYaml, "assets/tuned/05-cm-tuned-recommend.yaml")
}
func assetsTuned05CmTunedRecommendYaml() (*asset, error) {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	bytes, err := assetsTuned05CmTunedRecommendYamlBytes()
	if err != nil {
		return nil, err
	}
	info := bindataFileInfo{name: "assets/tuned/05-cm-tuned-recommend.yaml", size: 149, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTuned06DsTunedYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x9c\x56\x4d\x8f\x22\x37\x10\xbd\xf3\x2b\x4a\x9b\x5c\x9b\x66\x13\x25\x87\xbe\x8d\x80\x59\x8d\xb4\x30\x68\x98\x8d\x94\xd3\xc8\xb8\x0b\xb0\xf0\x47\xc7\x55\x66\x07\xad\xf2\xdf\x23\xd3\x1f\x74\xd3\x34\xb3\x4a\x5f\x66\x28\x3f\x3f\x57\xb9\x5e\x55\x59\x14\xea\x2f\xf4\xa4\x9c\xcd\x40\x14\x05\xa5\xc7\xcf\xa3\x83\xb2\x79\x06\x33\x81\xc6\xd9\x35\xf2\xc8\x20\x8b\x5c\xb0\xc8\x46\x00\x56\x18\xcc\x80\x83\xc5\xbc\xfa\x45\x85\x90\x98\x81\x2b\xd0\xd2\x5e\x6d\x39\x91\x3a\x10\xa3\x4f\xac\xcb\x31\xe1\x60\x95\xdd\x25\xae\x40\x2f\xd8\xf9\x11\x80\x16\x1b\xd4\x14\xb9\xa0\xb5\x49\x14\x45\x4d\x4b\x05\xca\xb8\x4c\xa8\x51\xb2\xf3\x25\xd4\x08\x96\xfb\xaf\xad\xbd\x03\xbb\x01\x18\x4d\xa1\x05\x63\xb5\xaf\xe5\x7c\xfc\x74\x87\x62\x90\x04\xa0\x76\xe3\xfc\x3f\xfa\xa3\x92\xf8\x20\xa5\x0b\x96\x97\x9d\x3b\x88\x9f\x08\xec\x4c\x5c\x5a\x77\x80\xaf\xee\x80\x36\x03\xf6\x01\x2b\xa0\x74\x96\x85\xb2\xe8\x1b\x0f\x12\x90\xce\x18\x61\xf3\x8b\x4b\x09\xa4\x47\xe1\x53\xad\x36\xe9\xf9\x90\x74\xa3\x6c\xea\x83\x6d\x00\x1e\xc9\x05\x2f\xb1\x15\x46\x34\xfe\x13\x90\xb8\x63\x03\x90\x45\xc8\xe0\xf3\xc4\x74\x8c\x06\x8d\xf3\xa7\x0c\x7e\x9b\x2c\x54\xb3\xa0\x8c\xd8\x61\x06\xbf\xfe\x98\x7e\xfd\xb6\x7e\x9d\xbf\xbc\x2d\x9f\x67\xf3\xb7\xd7\x6f\xcb\xf9\xec\xed\x69\xf1\xf0\x65\xfe\x6f\x17\xba\x0a\x5a\xaf\x9c\x56\xf2\x94\xc1\xd3\x76\xe9\x78\xe5\x91\xd0\x72\x83\xb2\xbd\x6b\x6a\x7b\x0e\x3f\x2e\x7c\x84\x32\x78\xc5\xa7\xa9\xb3\x8c\xef\xdc\x8e\xa0\xf0\xea\xa8\x34\xee\x30\xef\xdc\x63\xcc\xb2\x37\xca\x0a\x56\xce\x2e\x90\x28\x3a\x24\x78\x9f\x41\x9a\xe3\x31\x6d\x2d\x26\xda\xed\xee\x6d\xaa\x22\x78\x54\xfa\xc2\x7d\x74\x3a\x18\x5c\xc4\x14\x52\x3b\x2d\xe7\x14\x57\xc7\x20\xcb\x2a\x3b\x1e\x63\x06\xd1\xe6\xe3\xbc\xe5\x78\x19\x3d\xb2\x4c\xce\xa8\xa4\x41\x0d\xf0\x75\x33\x5e\x78\xb7\x55\x1a\x29\x89\xd2\xed\xb1\x1e\x85\x4f\xb4\xda\x54\xcc\xb7\xb1\x5d\x76\x3a\x51\x8f\xa5\x6d\xeb\xfb\xe2\x83\x4d\xf3\x4d\xe8\x6f\x8b\x87\xfb\x60\x93\xab\x45\x8f\x22\x7f\xb6\xfa\x74\x95\xa6\x2e\x71\x24\xa5\x13\x31\x9a\xbc\xfa\xdb\xa3\x8f\xd4\x15\x24\xe9\x41\x7e\xea\x90\x78\x8b\xc6\xe5\x41\x63\xdf\xf9\x78\x6b\xfd\xb5\x01\x5a\xb4\xc7\xb6\x14\x93\x8a\xe3\x79\xba\x2a\x6b\x63\xf9\xb0\x98\x77\xea\xea\x28\x74\xc0\x47\xef\x4c\xb7\x06\x01\xb6\x0a\x75\xfe\x82\xdb\x6b\x7b\xb5\x52\x3a\x1e\x1b\xce\x38\x36\xcd\xd8\x5f\x6e\x9c\xfb\x32\x5f\xff\xbd\x9c\xbe\xad\xe6\x2f\x4f\xcf\xb3\xfe\xb9\x19\x7c\xfa\x73\xf2\xa9\xb2\x97\x0a\x6e\x35\x99\xbd\xa3\xf2\x7e\xda\xb5\xd5\xd7\xc6\xb5\x32\xee\x6e\xbc\x29\x93\x41\x91\xdc\xa5\xba\x23\x8c\x0f\x64\x71\x97\xf6\x96\x14\x86\x84\x10\x1b\xb1\xdd\xaa\xdd\x42\x14\x6d\x26\xc5\x68\xa8\x2b\x83\x03\x9e\xaa\xbe\x96\x38\x59\xdc\xa8\xec\x8b\x07\x7f\x4c\x92\x66\xc0\x8c\x23\x7f\x4f\x91\x43\xdd\x21\x4e\xa6\xd8\xa7\x84\xbe\x52\xe5\x47\x8d\xe5\x7f\xc5\x31\xd4\x6f\xea\x38\xba\xa8\xf1\x49\x18\x3d\x10\x49\x8d\xf9\xd9\x40\x3e\xee\x65\xb9\xa5\xba\x4b\x4f\xcb\xa7\xc5\xa3\xf2\x54\xcf\x99\x58\x30\xeb\xce\x4b\x21\x7e\x1b\x64\x31\x3e\x84\x0d\x7a\x8b\x8c\x34\x56\x2e\x75\x14\xb3\x6e\xc3\x7b\x05\x2a\xbc\x72\xe7\xa1\xa3\x05\x51\x39\xd2\x3f\x95\xca\x2a\x5f\x2e\xd2\x2b\x56\x52\xe8\xba\xa4\xa2\xcc\x96\xc8\xdf\x9d\x3f\x74\x02\x39\xcb\xef\x69\xd6\xb1\x79\x24\x16\x9e\x6b\xb7\x1f\xf4\x77\xd1\x94\x14\xc9\x3d\x46\xdd\xf9\xf2\xcc\x1c\xb7\x22\x68\x4e\x1a\x73\xf3\xe4\xe8\xce\xc4\xcb\xbc\x6c\x0d\xb1\x2f\x5e\x48\x5c\xa1\x57\x2e\x5f\xa3\x74\x36\xa7\x0c\x7e\x9f\xd4\x38\xa7\xe3\xa3\x4b\x39\xdb\xe4\xfd\x97\xda\x88\x20\xb4\x86\xf8\x14\x61\x02\x72\xc0\x7b\xc1\x65\x02\x41\x11\x88\xb3\xbf\x50\x94\x03\x1d\x9c\x3d\xa3\xe3\xad\x5c\x8a\xa5\x7e\xd1\x65\x30\x7f\x57\xc4\x34\xfa\x2f\x00\x00\xff\xff\x7a\x8b\x66\x66\x4a\x0a\x00\x00")

func assetsTuned06DsTunedYamlBytes() ([]byte, error) {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	return bindataRead(_assetsTuned06DsTunedYaml, "assets/tuned/06-ds-tuned.yaml")
}
func assetsTuned06DsTunedYaml() (*asset, error) {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	bytes, err := assetsTuned06DsTunedYamlBytes()
	if err != nil {
		return nil, err
	}
	info := bindataFileInfo{name: "assets/tuned/06-ds-tuned.yaml", size: 2634, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

var _assetsTunedDefaultCrTunedYaml = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xb4\x56\x4f\x6f\xdb\xc6\x13\xbd\xeb\x53\x0c\x94\xdf\xc1\xc6\x2f\xa4\x2c\x59\xb2\x63\x02\xec\x25\x0d\x90\x43\x8b\x04\x4d\xda\x4b\x51\x10\xeb\xe5\x50\x5c\x68\xff\x61\x67\x56\xb6\xd2\xf6\xbb\x17\x4b\x91\xb4\xad\xd8\x8e\x82\xba\x3a\x91\xdc\xd9\xf7\xe6\xcd\xdb\x19\xad\xf0\xea\x37\x0c\xa4\x9c\x2d\x80\xa3\xc5\x3a\x77\x1e\x2d\xb5\xaa\xe1\x5c\xb9\xd9\x76\x3e\xd9\x28\x5b\x17\xf0\x39\xad\x4d\x0c\xb2\xa8\x05\x8b\x62\x02\x60\x85\xc1\x02\x6a\x6c\x44\xd4\xdc\xbf\x93\x17\x12\x0b\x18\x21\x32\xa9\x23\x31\x86\xcc\xba\x1a\x33\x8e\x56\xd9\x75\xe6\x3c\x06\xc1\x2e\x4c\xc8\xa3\x4c\x48\x3e\xb8\x46\x69\x4c\x8f\x59\x0f\x3b\x1d\x21\xa6\x13\x00\x80\x8e\x14\xfe\xea\x9e\x01\x7e\x37\x42\xd9\x3f\xfa\x17\x8a\xc6\x88\xb0\x2b\x3f\x78\x56\x46\x7d\x41\xa0\x1d\x31\x1a\x82\x10\x6d\xe2\x83\x0f\x1e\xed\xa7\x04\x05\x27\x5e\x04\xb4\x3c\x10\x9e\xf6\x08\xca\x4a\x1d\x6b\x2c\xff\xf7\x67\x53\x6c\x55\xe0\x4a\xb6\x28\x37\xdd\x63\x14\x3a\x5b\x47\x24\x2e\xb8\x0d\x2e\xae\x5b\x1f\x39\xf3\x18\x1a\x17\x8c\xb0\x12\xff\x9e\x0c\x29\x11\x6a\x65\xe3\xed\x90\x95\xd8\xca\x4a\x0a\xd9\x62\xc5\x6d\x40\x6a\x9d\xae\xcb\x37\xf3\xab\xc5\x18\x6f\x91\x87\x58\xdb\x54\xd2\x59\xcb\x41\xc8\x4d\xd5\x0a\x6a\x49\x7d\xc1\x72\x7e\x3e\x3f\xbb\xbc\x8b\xa7\x1d\x49\xd6\xe3\x16\xe4\x5c\xf9\xed\x32\x57\xbe\x6a\x5c\xb8\x11\xa1\x2e\xe7\xfd\xda\x06\x83\x45\x9d\x7b\x55\x57\x46\xdc\x96\x3f\xf4\x40\x77\x1b\x2d\x72\xa3\x34\x63\xc8\x1f\x30\xa7\xe0\xf9\xd9\xf2\xcd\xea\xf2\xe2\x90\xc5\xa2\x5a\xb7\x79\xef\x75\xbe\x96\xbd\xa8\xf9\x5e\xd2\x71\xc1\x8b\xf2\x7c\x71\x79\xf1\xe6\xc8\xe8\xf3\xf2\x62\xb5\x3a\x3f\x48\xe4\xe2\x7b\x12\x79\x32\xf8\xd1\x44\x9e\x8c\x1e\x12\xb9\xe7\x43\x43\x83\x0d\x33\xda\xd1\xcc\xb8\x3a\x6a\x9c\xd9\xad\xc1\x4a\xba\x80\x33\x2f\x82\x30\xc8\x18\x68\xa6\x5c\xc5\xca\xa0\x8b\x5c\x2e\x17\x57\xcb\xab\x8b\xcb\xc5\xd5\xea\xd8\xcd\x46\xdc\x56\x01\x39\x28\xa4\x72\x7e\x36\x79\xb4\x3d\x32\xe9\x2c\x07\xa7\x33\xaf\x85\xc5\x97\x6c\x96\x1e\x18\x3a\xe0\x83\x4e\x19\xe9\x9f\x38\x9e\xaf\x60\x93\x86\x09\xec\xbf\x02\x21\xb3\xb2\x6b\x7a\x0d\x46\xdc\x26\xde\xc4\xa4\x66\x0e\xee\x9a\x6a\xd8\x38\x02\xfc\xac\xac\x32\x42\x83\x0f\x88\xc6\xb3\x72\x16\xd6\x41\xd8\xa8\x45\x50\xbc\x83\xc6\x05\x78\xfb\xf1\xd7\xec\xda\x45\x5b\x03\x0b\xda\x50\x31\xee\x3d\xe9\x5d\x2c\x60\x0e\x86\x50\xbe\x02\x38\x99\xc3\xff\x41\x69\xb7\x3e\xb1\xd2\x47\x3a\x3d\x7d\x0d\xd1\x2a\xa6\x02\xac\xb0\x8e\x50\x3a\x5b\xd3\xe9\xc3\x0e\x22\xd9\x62\x5d\x19\x65\xab\x7b\xcc\x95\x4d\x66\xec\x7f\x23\xe1\xe7\x16\x81\x1d\x0b\x0d\xc9\x6d\xe0\x16\xa1\xdb\x1c\x35\x06\xb8\x51\x5a\xa7\x6a\x92\xaa\x31\x80\x00\xa3\xd6\x41\x30\xd6\x69\x0c\x49\x24\x1a\x51\xa6\xdd\xc0\x80\xd6\xf1\x14\x44\x52\xd5\x46\x02\x8d\x44\xa0\xd5\x06\xf5\x0e\xd8\xc1\x35\x42\xc0\x6c\x80\xb8\x53\xbc\xf7\x71\x18\xc7\xa0\x08\x56\x5d\x8a\xaf\x41\xe5\x98\xc3\x59\xbe\x02\xf3\x94\xbe\x84\xa5\x9c\xad\xa4\x23\x4e\xf2\x56\x07\xea\x3e\xbd\x7d\xff\xee\xc7\xea\xc3\xe7\xf7\xef\x7e\x81\x1b\xb1\xc1\x2c\xfa\xfb\x5e\xe4\x5f\x79\xf7\xf1\x71\xcf\x6e\x5a\xb4\x7b\xab\x3a\x18\x88\x3e\x07\xf8\xc9\xdd\x60\xe8\x2a\xb6\x15\x3a\xa6\x32\x8e\x30\xca\xf8\xe0\xb6\x38\x72\x6a\xc1\x68\xe5\xae\xaf\xcd\x70\x72\xba\xa3\x30\x2c\xc9\xa0\x58\xc9\xe4\x43\xa2\xc9\x1f\xd3\x9b\xd0\xa2\x3f\xb4\x74\xd9\x6b\x7e\xbc\xc9\xd2\xdf\xd7\x4b\xf6\x56\xc2\xa3\xef\xec\xa9\x71\x62\xb2\xf4\x55\x23\x88\xd3\x86\xf2\xbc\x5f\x6d\x28\x57\xd6\xb1\x6a\x76\x79\x1a\x1b\x91\x30\x54\x37\x82\x65\x8b\x74\x37\xc0\xbe\x35\x3e\x32\xa4\x7f\xaf\xf2\xdd\x27\x70\xf6\xeb\x39\x92\x3d\x3b\x47\x1e\xe6\xf1\x44\x05\xb6\xa6\xd3\x66\x84\xaf\xa4\x8b\x96\xcb\xc5\xc5\x62\xbe\x5c\x3e\xe3\xd9\x7f\x22\xe8\x59\xf3\x3a\xda\xef\xcf\x3f\xa0\x74\xc6\xa0\xad\xf7\x97\xa0\xe1\x46\xf4\x6d\xa7\x7c\x50\x2e\x9d\xe1\x02\xe6\xfb\x86\x35\xc9\xf4\xfd\x28\xcc\x40\x8b\x6b\xd4\x05\x4c\x1f\xb9\xd9\xa1\x16\xc4\x4a\x12\x8a\x20\xdb\x69\x9f\x21\xef\x7c\x22\xf5\xae\x1e\xbe\xdc\x83\xbb\x0f\xd8\x15\x37\x38\x8d\xf9\x26\x5e\xa7\xee\x62\xa4\x84\x6a\x44\xba\xee\x4d\x8f\x8e\x57\xb6\x09\x62\x3a\x79\x52\xf4\x03\x13\xef\xb4\x2e\x5e\x58\xeb\x71\x45\x3f\xcc\xe2\xfc\x99\x2c\x8e\x29\xd0\xcb\x94\xe7\x30\xab\xe5\xd9\xe4\x9f\x00\x00\x00\xff\xff\x4a\xe0\xd1\x90\xd5\x0b\x00\x00")

func assetsTunedDefaultCrTunedYamlBytes() ([]byte, error) {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	return bindataRead(_assetsTunedDefaultCrTunedYaml, "assets/tuned/default-cr-tuned.yaml")
}
func assetsTunedDefaultCrTunedYaml() (*asset, error) {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	bytes, err := assetsTunedDefaultCrTunedYamlBytes()
	if err != nil {
		return nil, err
	}
	info := bindataFileInfo{name: "assets/tuned/default-cr-tuned.yaml", size: 3029, mode: os.FileMode(420), modTime: time.Unix(1, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}
func Asset(name string) ([]byte, error) {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}
func MustAsset(name string) []byte {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}
	return a
}
func AssetInfo(name string) (os.FileInfo, error) {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}
func AssetNames() []string {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

var _bindata = map[string]func() (*asset, error){"assets/tuned/01-service-account.yaml": assetsTuned01ServiceAccountYaml, "assets/tuned/02-cluster-role.yaml": assetsTuned02ClusterRoleYaml, "assets/tuned/03-cluster-role-binding.yaml": assetsTuned03ClusterRoleBindingYaml, "assets/tuned/04-cm-tuned-profiles.yaml": assetsTuned04CmTunedProfilesYaml, "assets/tuned/05-cm-tuned-recommend.yaml": assetsTuned05CmTunedRecommendYaml, "assets/tuned/06-ds-tuned.yaml": assetsTuned06DsTunedYaml, "assets/tuned/default-cr-tuned.yaml": assetsTunedDefaultCrTunedYaml}

func AssetDir(name string) ([]string, error) {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func		func() (*asset, error)
	Children	map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{"assets": {nil, map[string]*bintree{"tuned": {nil, map[string]*bintree{"01-service-account.yaml": {assetsTuned01ServiceAccountYaml, map[string]*bintree{}}, "02-cluster-role.yaml": {assetsTuned02ClusterRoleYaml, map[string]*bintree{}}, "03-cluster-role-binding.yaml": {assetsTuned03ClusterRoleBindingYaml, map[string]*bintree{}}, "04-cm-tuned-profiles.yaml": {assetsTuned04CmTunedProfilesYaml, map[string]*bintree{}}, "05-cm-tuned-recommend.yaml": {assetsTuned05CmTunedRecommendYaml, map[string]*bintree{}}, "06-ds-tuned.yaml": {assetsTuned06DsTunedYaml, map[string]*bintree{}}, "default-cr-tuned.yaml": {assetsTunedDefaultCrTunedYaml, map[string]*bintree{}}}}}}}}

func RestoreAsset(dir, name string) error {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}
func RestoreAssets(dir, name string) error {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	children, err := AssetDir(name)
	if err != nil {
		return RestoreAsset(dir, name)
	}
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}
func _filePath(dir, name string) string {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
func _logClusterCodePath() {
	_logClusterCodePath()
	defer _logClusterCodePath()
	_logClusterCodePath()
	defer _logClusterCodePath()
	pc, _, _, _ := godefaultruntime.Caller(1)
	jsonLog := []byte(fmt.Sprintf("{\"fn\": \"%s\"}", godefaultruntime.FuncForPC(pc).Name()))
	godefaulthttp.Post("http://35.226.239.161:5001/"+"logcode", "application/json", godefaultbytes.NewBuffer(jsonLog))
}
func _logClusterCodePath() {
	_logClusterCodePath()
	defer _logClusterCodePath()
	pc, _, _, _ := godefaultruntime.Caller(1)
	jsonLog := []byte(fmt.Sprintf("{\"fn\": \"%s\"}", godefaultruntime.FuncForPC(pc).Name()))
	godefaulthttp.Post("/"+"logcode", "application/json", godefaultbytes.NewBuffer(jsonLog))
}
